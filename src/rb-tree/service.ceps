/*
A data storage organised in a rb tree as Planckservice (smallest possible microservice).
*/

kind Event;                                    //You can now write Event MyEvent, and MyEvent is known to be a special 'thing' associated with Event
kind Guard;                                    // Guards for transitions, again you can now write Guard myguard;


kind OblectamentaMsgDefDirective;              // Is used in connection with the serialization of messages
kind OblectamentaMsgReadDirective;             // Is used in connection with the deserialization of messages
kind OblectamentaMessageModifier;              // Indicates flags modifying the standad behaviour of serialization/deserialization of messages

OblectamentaMessageTag i32;                    // Used when writing/reading message fields which contain 32 bit integers
OblectamentaMessageTag i64;                    // Used when writing/reading message fields which contain 64 bit integers
OblectamentaMessageTag f64;                    // Used when writing/reading message fields which contain 64 bit floats (IEEE 754)
OblectamentaMessageTag sz;                     // ... zero terminated strings
OblectamentaMessageModifier all;               // This one let you iterate over all fields of a given name

OblectamentaMsgDefDirective write;             // Indicates the serialization of a message
OblectamentaMsgReadDirective read;             // ... deserialization ...
   
OblectamentaDataLabel rb_tree_i32_i32, msg_buffer,msg_buffer_reply, accounts, 
                      pi,nl,count, client_count, event_header;     // Data labels mark the location of data in the global data segment

kind OblectamentaGlobalEventPayload; 
OblectamentaGlobalEventPayload global_payload_buffer;
kind OblectamentaGlobalEventMetainformation;
OblectamentaGlobalEventMetainformation global_event_header_buffer;

Event evRequestEntry; 

macro NODE{
 hd(arglist); // value
 hd(tail(arglist)); // parent
 hd(tail(tail(arglist))); // left
 hd(tail(tail(tail(arglist)))); // right
}; 

val rb_tree_i32_i32_node_value_ofs = 0;
val rb_tree_i32_i32_node_parent_ofs = 4;
val rb_tree_i32_i32_node_left_ofs = 8;
val rb_tree_i32_i32_node_right_ofs = 12;
val rb_tree_i32_i32_node_size = 16;
val rb_tree_i32_i32_addr_size = 4; 
val rb_tree_i32_i32_nil_addr = rb_tree_i32_i32_addr_size; 

oblectamenta{ 
 global{
   data{                                       // here are the global data definitions
    rb_tree_i32_i32; // key,parent,left,right last three fields are relative offsets
    rb_tree_i32_i32_node_size; // ROOT 
    NODE{0;0;0;0;};
    NODE{33;rb_tree_i32_i32_nil_addr;32;48;};
    NODE{13;16;rb_tree_i32_i32_nil_addr;rb_tree_i32_i32_nil_addr;};
    NODE{44;16;rb_tree_i32_i32_nil_addr;rb_tree_i32_i32_nil_addr;};

    msg_buffer_reply; 0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;
    0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;
    

    msg_buffer;global_payload_buffer; for(e : 1 .. 64) {0;}          // Reserve 32 consecutively stored 32 bit integers initialized to the value 0
   };
 };
};

sm{                                            
 Service;                                   
 states{Initial;Ready;ProcessFindEntry;};
 Actions{                         
  doFindEntry{
   oblectamenta{text{asm{
    OblectamentaCodeLabel loop, not_found;
    msg{read;msg_buffer;{Key{i32;sti32(R0);};}};
    //INVARIANT: R0 contains key value
    // R1 contains base address of rb-tree
    lea(rb_tree_i32_i32);sti64(R1);
    // R2 contains offset of current node
    lea(rb_tree_i32_i32);ldsi32;sti32(R2);
    
loop;
    // R2 != NIL
    ldi32(R2);
    ldi32(rb_tree_i32_i32_nil_addr);
    beq(not_found);
    halt;

dbg_print_cs_and_regs(0);halt;dbg_print_data(0);halt;

    dbg_print_cs_and_regs(0);
    dbg_print_cs_and_regs(0);
    halt;
not_found; dbg_print_cs_and_regs(0);halt;

   };};};
  };
 };
 t{Initial;Ready;};
 t{Ready;ProcessFindEntry;evRequestEntry;doFindEntry;}; 
 t{ProcessFindEntry;Ready;};
};

sm{
 Client;
 states{Initial;RequestKey;};
 Actions{
  doRequestKey{
   oblectamenta{text{asm{
    evRequestEntry(msg{write;msg_buffer;{Key{ldi32(33);i32;};}});
   };};};
  };
 };
 t{Initial;RequestKey;doRequestKey;};
};

Simulation{
 Start{Service;Client;};
};
